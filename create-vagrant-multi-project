#! /bin/bash

# create-vagrant-multi-project
# By Matthew Fritz
#
# Creates a set of directories and files for my multi-machine Vagrant projects as a starting point.
# This allows me to generate my general project structure and management scripts from a single
# command and in a consistent way.
#
# Ensure you add the directory within which this script resides to your PATH in order to use it
# throughout your system.
#
# Usage:
#
#    create-multi-vagrant-project [project name] [space-separated names of machines]
#
# Usage example (project name is "myproject" and the two machines are "web" and "db"):
#
#    create-multi-vagrant-project myproject web db
#
# This will create the following directory structure (and bare Git repository) based
# on the arguments:
#
# myproject-vagrant/
#    .git/
#    images/
#       .gitkeep
#    machines/
#       common/
#          provision/
#             provision-common.sh
#       myproject-db/
#          files/
#             .gitkeep
#          provision/
#             provision-db.sh
#          Vagrantfile
#       myproject-web/
#          files/
#             .gitkeep
#          provision/
#             provision-web.sh
#          Vagrantfile
#    .gitignore
#    LICENSE
#    README.md
#    add-vbox-guest-additions.bat
#    add-vbox-guest-additions.sh
#    start-vms.bat
#    start-vms.sh
#    stop-vms.bat
#    stop-vms.sh
#
# The script will also perform a "chmod +x *.sh" on all the scripts in the root of
# the new project directory to allow for immediate execution. Vagrant does not need
# execute permissions on its provisioning scripts, however.
#
# The output of the script also ends with the following for easy addition to .bashrc
# based upon the usage example (the path variable will be auto-populated based on
# script location):
#
#    MYPROJECT_VAGRANT="/path/to/myproject-vagrant"
#    alias myproject-vagrant="cd ${MYPROJECT_VAGRANT}"
#    alias myproject-init="pushd ${MYPROJECT_VAGRANT} && ./add-vbox-guest-additions.sh && ./start-vms.sh && popd"
#    alias myproject-start="pushd ${MYPROJECT_VAGRANT} && ./start-vms.sh && popd"
#    alias myproject-stop="pushd ${MYPROJECT_VAGRANT} && ./stop-vms.sh && popd"
#    alias myproject-restart="myproject-stop && myproject-start"
#
# Current script version:
# https://github.com/matthewfritz/create-vagrant-multi-project/blob/master/create-vagrant-multi-project

# Resolve where this script lives on the filesystem
SCRIPT_DIR=$(dirname $0)

# Resolve the script execution directory
EXEC_DIR=$(pwd)

# Resolve the script name
SCRIPT_NAME=$(basename $0)

# Project name (will be overridden)
PROJECT_NAME="myproject"

# Define our exit error codes
E_PROJECT_DIR_EXISTS=81
E_NO_MACHINES=82

# Source my Bash output function library
. ${SCRIPT_DIR}/.bash_output_functions

# Checks the existence of the provided project directory relative to the
# script execution directory.
#
# If the specified project directory already exists, this function displays
# an error message and then exits with the error code E_PROJECT_DIR_EXISTS.
#
# Usage: check_project_dir "myproject"
check_project_dir()
{
   local _project_dir="${EXEC_DIR}/$1"
   if [ -d "$_project_dir" ]; then
      write_color_error_exit_line $E_PROJECT_DIR_EXISTS "The project directory \"$1\" already exists."
   fi
}

# Displays the usage of the script
#
# Usage: display_usage
display_usage()
{
   echo "Usage:"
   echo
   echo "   ${SCRIPT_NAME} [project name] [space-separated names of machines]"
   echo
   echo "Usage example (project name is \"myproject\" and the two machines are \"web\" and \"db\"):"
   echo
   echo "   ${SCRIPT_NAME} myproject web db"
   echo
   echo "The usage example will create a directory called \"myproject\" with two machines called"
   echo "\"web\" and \"db\"."
}

# Performs the scaffolding operations for the machine given in the argument based
# upon the project name.
#
# Usage: scaffold_machine myproject web
# Generates the scaffolding for the machine called "web" in the project called
# "myproject"
scaffold_machine()
{
   local _project_name="$1"
   local _machine_name="$2"
   

}

# Execute the script based on the number of arguments passed
case "$#" in
   0 )
      # Show the script usage
      display_usage
      ;;
   1 )
      # Check to see if the project directory already exists
      check_project_dir "$1"

      # Show a message based upon a project but no machines
      write_color_error_exit_line $E_NO_MACHINES "No machines were specified for project \"$1\"."
      ;;
   * )
      # Check to see if the project directory already exists
      check_project_dir "$1"
      
      # Create the project directory and display a message
      _project_name="$1"
      write_color_info_line "Creating project directory \"${_project_name}\"..."
      mkdir ${EXEC_DIR}/${_project_name}
      write_color_info_line "Created project directory \"${_project_name}\""

      # Create the images directory and the .gitkeep file
      write_color_info_line "Creating images directory..."
      mkdir ${EXEC_DIR}/${_project_name}
      touch ${EXEC_DIR}/${_project_name}/.gitkeep
      write_color_info_line "Created images directory"

      # Create the machines directory for machine operations
      write_color_info_line "Creating machines directory..."
      mkdir ${EXEC_DIR}/${_project_name}
      write_color_info_line "Created machines directory"

      # The machines begin right after the index of the project
      _machine_index=1
      _machines_arr=($@)

      # Scaffold the machines for the project
      write_color_info_line "Creating machine scaffolding..."

      for (( i = _machine_index; i < "$#"; i++ )); do
         scaffold_machine "${_project_name}" "${_machines_arr[$i]}"
      done

      write_color_info_line "Finished"
      ;;
esac